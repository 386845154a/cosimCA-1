<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.casic.cloud.model.config.materialCatalog.MaterialCatalog">
	<resultMap id="MaterialCatalog" type="com.casic.cloud.model.config.materialCatalog.MaterialCatalog">
		<id property="id" column="id" jdbcType="NUMERIC"/>
		<result property="code" column="code" jdbcType="VARCHAR"/>
		<result property="name" column="name" jdbcType="VARCHAR"/>
		<result property="descn" column="descn" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id" jdbcType="NUMERIC"/>
		<result property="parentName" column="parent_name" jdbcType="VARCHAR"/>
		<result property="typeId" column="type_id" jdbcType="NUMERIC"/>
		<result property="typeName" column="type_name" jdbcType="VARCHAR"/>
		<result property="typeLevel" column="type_level" jdbcType="NUMERIC"/>
		<result property="entId" column="ent_id" jdbcType="NUMERIC"/>
		<result property="entName" column="ent_name" jdbcType="VARCHAR"/>
		<result property="isLeaf" column="isLeaf" jdbcType="NUMERIC"/>
	</resultMap>

	<sql id="columns">
		id,code,name,descn,parent_id,parent_name,type_id,type_name,type_level,ent_id,ent_name,isLeaf
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<if test="@Ognl@isNotEmpty(id)"> AND id  =#{id} </if>
			<if test="@Ognl@isNotEmpty(code)"> AND code  LIKE #{code}  </if>
			<if test="@Ognl@isNotEmpty(name)"> AND name  LIKE #{name}  </if>
			<if test="@Ognl@isNotEmpty(descn)"> AND descn  LIKE #{descn}  </if>
			<if test="@Ognl@isNotEmpty(parentId)"> AND parent_id  =#{parentId} </if>
			<if test="@Ognl@isNotEmpty(parentName)"> AND parent_name  LIKE #{parentName}  </if>
			<if test="@Ognl@isNotEmpty(typeId)"> AND type_id  =#{typeId} </if>
			<if test="@Ognl@isNotEmpty(typeName)"> AND type_name  LIKE #{typeName}  </if>
			<if test="@Ognl@isNotEmpty(typeLevel)"> AND type_level  =#{typeLevel} </if>
			<if test="@Ognl@isNotEmpty(entId)"> AND ent_id  =#{entId} </if>
			<if test="@Ognl@isNotEmpty(entName)"> AND ent_name  LIKE #{entName}  </if>
		</where>
	</sql>

	<insert id="add" parameterType="com.casic.cloud.model.config.materialCatalog.MaterialCatalog">
		INSERT INTO cloud_material_catalog
		(<include refid="columns"/>)
		VALUES
		(#{id,jdbcType=NUMERIC}, #{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{descn,jdbcType=VARCHAR}, #{parentId,jdbcType=NUMERIC}, #{parentName,jdbcType=VARCHAR}, #{typeId,jdbcType=NUMERIC}, #{typeName,jdbcType=VARCHAR}, #{typeLevel,jdbcType=NUMERIC}, #{entId,jdbcType=NUMERIC}, #{entName,jdbcType=VARCHAR}, #{isLeaf,jdbcType=NUMERIC})
	</insert>
	
	<delete id="delById" parameterType="java.lang.Long">
		DELETE FROM cloud_material_catalog 
		WHERE
		id=#{id}
	</delete>
	
	<update id="update" parameterType="com.casic.cloud.model.config.materialCatalog.MaterialCatalog">
		UPDATE cloud_material_catalog SET
		code=#{code,jdbcType=VARCHAR},
		name=#{name,jdbcType=VARCHAR},
		descn=#{descn,jdbcType=VARCHAR},
		parent_id=#{parentId,jdbcType=NUMERIC},
		parent_name=#{parentName,jdbcType=VARCHAR},
		type_id=#{typeId,jdbcType=NUMERIC},
		type_name=#{typeName,jdbcType=VARCHAR},
		type_level=#{typeLevel,jdbcType=NUMERIC},
		ent_id=#{entId,jdbcType=NUMERIC},
		ent_name=#{entName,jdbcType=VARCHAR},
		isLeaf=#{isLeaf,jdbcType=NUMERIC}
		WHERE
		id=#{id}
	</update>
		    
	<select id="getById" parameterType="java.lang.Long" resultMap="MaterialCatalog">
		SELECT <include refid="columns"/>
		FROM cloud_material_catalog
		WHERE
		id=#{id}
	</select>
	
	<select id="getByParentId"  resultMap="MaterialCatalog">
		SELECT <include refid="columns"/>
		FROM cloud_material_catalog
		WHERE
		parent_id=#{parentId,jdbcType=NUMERIC}
		and ent_id=#{ent_id,jdbcType=NUMERIC} 
	</select>
	
	
	<select id="getAll" resultMap="MaterialCatalog">
		SELECT <include refid="columns"/>
		FROM cloud_material_catalog   
		<include refid="dynamicWhere" />
		<if test="@Ognl@isNotEmpty(orderField)">
		order by ${orderField} ${orderSeq}
		</if>
		<if test="@Ognl@isEmpty(orderField)">
		order by id  desc
		</if>
	</select>
</mapper>
