package com.hotent.platform.controller.system;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.Map.Entry;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.ezmorph.object.DateMorpher;
import net.sf.json.JSONObject;
import net.sf.json.util.JSONUtils;

import org.displaytag.util.ParamEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.hotent.core.annotion.Action;
import com.hotent.core.customertable.BaseTableMeta;
import com.hotent.core.customertable.IDbView;
import com.hotent.core.customertable.TableModel;
import com.hotent.core.customertable.impl.TableMetaFactory;
import com.hotent.core.engine.FreemarkEngine;
import org.springframework.web.servlet.ModelAndView;

import com.hotent.core.util.BeanUtils;
import com.hotent.core.util.StringUtil;
import com.hotent.core.util.UniqueIdUtil;
import com.hotent.core.page.PageBean;
import com.hotent.core.web.util.RequestUtil;
import com.hotent.core.web.controller.BaseController;
import com.hotent.core.web.query.QueryFilter;
import com.hotent.platform.model.form.BpmFormDef;
import com.hotent.platform.model.form.BpmFormDialog;
import com.hotent.platform.model.form.BpmFormTemplate;
import com.hotent.platform.model.system.SysTableManage;
import com.hotent.platform.model.form.BpmFormTable;
import com.hotent.platform.model.system.SysCustomData;
import com.hotent.platform.model.system.SysManageField;
import com.hotent.platform.model.system.Message;
import com.hotent.platform.model.system.SysDataSource;
import com.hotent.platform.service.system.SysTableManageService;
import com.hotent.platform.service.form.BpmFormTemplateService;
import com.hotent.platform.service.form.FormUtil;
import com.hotent.platform.service.system.SysDataSourceService;
import com.hotent.core.web.ResultMessage;

/**
 * 对象功能:自定义表管理 控制器类 开发公司:广州宏天软件有限公司 开发人员:ray 创建时间:2012-06-25 11:05:09
 */
@Controller
@RequestMapping("/platform/system/sysTableManage/")
public class SysTableManageController extends BaseController {
	@Resource
	private SysTableManageService sysTableManageService;

	@Resource
	private SysDataSourceService sysDataSourceService;

	@Resource
	private FreemarkEngine freemarkEngine;
	
	@Resource
	private BpmFormTemplateService bpmFormTemplateService;
	
	private static String DEFAULT_ORDER_SEQ="DESC";

	
	/**
	 * 添加或更新通用表单对话框。
	 * @param request
	 * @param response
	 * @param sysTableManage 添加或更新的实体
	 * @param bindResult
	 * @param viewName
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("save")
	@Action(description="添加或更新自定义表管理")
	public void save(HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		String resultMsg="";
		SysTableManage sysTableManage = getFormObject(request);
		if(StringUtil.isEmpty(sysTableManage.getDisplayfield())){
			resultMsg=getText("未设置显示的字段");
			writeResultMessage(response.getWriter(),resultMsg,ResultMessage.Fail);
			return;
		}		
		if(sysTableManage.getId()==0){
			sysTableManage.setId(UniqueIdUtil.genId());
			String alias=sysTableManage.getAlias();
			boolean isExist=sysTableManageService.isExistAlias(alias);
			if(isExist){
				resultMsg=getText("该别名已经存在！");
				writeResultMessage(response.getWriter(),resultMsg,ResultMessage.Fail);
				return;
			}
			
			sysTableManageService.add(sysTableManage);
			resultMsg=getText("record.added","自定义表管理");
			
		}else{
			String alias=sysTableManage.getAlias();
			Long id=sysTableManage.getId();
			boolean isExist=sysTableManageService.isExistAliasForUpd(id, alias);
			if(isExist){
				resultMsg=getText("该别名已经存在！");
				writeResultMessage(response.getWriter(),resultMsg,ResultMessage.Fail);
				return;
			}
			sysTableManageService.update(sysTableManage);
			resultMsg=getText("record.updated","自定义表管理");
		}
		writeResultMessage(response.getWriter(),resultMsg,ResultMessage.Success);
	}
	
	
	
	/**
	 * 取得自定义表管理分页列表
	 * 
	 * @param request
	 * @param response
	 * @param page
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("list")
	@Action(description = "查看自定义表管理分页列表")
	public ModelAndView list(HttpServletRequest request, HttpServletResponse response) throws Exception {
		List<SysTableManage> list = sysTableManageService.getAll(new QueryFilter(request, "sysTableManageItem"));
		ModelAndView mv = this.getAutoView().addObject("sysTableManageList", list);
		return mv;
	}

	/**
	 * 删除自定义表管理
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping("del")
	@Action(description = "删除自定义表管理")
	public void del(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String preUrl = RequestUtil.getPrePage(request);
		ResultMessage message = null;
		try {
			Long[] lAryId = RequestUtil.getLongAryByStr(request, "id");
			sysTableManageService.delByIds(lAryId);
			message = new ResultMessage(ResultMessage.Success, "删除自定义表管理成功!");
		} catch (Exception ex) {
			message = new ResultMessage(ResultMessage.Fail, "删除失败:" + ex.getMessage());
		}
		addMessage(message, request);
		response.sendRedirect(preUrl);
	}

	@RequestMapping("edit")
	@Action(description = "编辑自定义表管理")
	public ModelAndView edit(HttpServletRequest request) throws Exception {
		Long id = RequestUtil.getLong(request, "id");
		String returnUrl = RequestUtil.getPrePage(request);
		SysTableManage sysTableManage = null;
		if (id != 0) {
			sysTableManage = sysTableManageService.getById(id);
		} else {
			sysTableManage = new SysTableManage();
		}
		List<SysDataSource> dsList = sysDataSourceService.getAll();
		
		List<BpmFormTemplate> templates = bpmFormTemplateService.getAllTableManageTemplate();

		return getAutoView()
				.addObject("sysTableManage", sysTableManage)
				.addObject("returnUrl", returnUrl)
				.addObject("dsList", dsList)
				.addObject("templates", templates);
	}

	/**
	 * 取得自定义表管理明细
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("get")
	@Action(description = "查看自定义表管理明细")
	public ModelAndView get(HttpServletRequest request, HttpServletResponse response) throws Exception {
		long id = RequestUtil.getLong(request, "id");
		SysTableManage sysTableManage = sysTableManageService.getById(id);
		return getAutoView().addObject("sysTableManage", sysTableManage);
	}

	@RequestMapping("dialogObj")
	@Action(description = "查看自定义表管理明细")
	@ResponseBody
	public Map<String, Object> dialogObj(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String alias = RequestUtil.getString(request, "alias");
		Map<String, Object> map = new HashMap<String, Object>();
		SysTableManage sysTableManage = sysTableManageService.getByAlias(alias);
		if (sysTableManage != null) {
			map.put("sysTableManage", sysTableManage);
			map.put("success", 1);
		} else {
			map.put("success", 0);
		}

		return map;
	}

	/**
	 * 根据数据源，输入的对象类型，对象名称获取对象列表。
	 * 
	 * <pre>
	 *  1.对象类型为表。
	 *  	返回表的map对象。
	 *  2.对象为视图
	 *  	返回视图列表对象。
	 * </pre>
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("getByDsObjectName")
	@Action(description = "根据对象名称对象类型")
	@ResponseBody
	public Map getByDsObjectName(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String dsName = RequestUtil.getString(request, "dsName");
		String objectName = RequestUtil.getString(request, "objectName");
		int istable = RequestUtil.getInt(request, "istable");
		Map map = new HashMap();
		try {
			if (istable == 1) {
				BaseTableMeta meta = TableMetaFactory.getMetaData(dsName);
				Map<String, String> tableMap = meta.getTablesByName(objectName);
				map.put("tables", tableMap);
			} else {
				IDbView dbView = TableMetaFactory.getDbView(dsName);
				List<String> views = dbView.getViews(objectName);
				map.put("views", views);
			}
			map.put("success", "true");
		} catch (Exception ex) {
			map.put("success", "false");
		}
		return map;
	}

	/**
	 * 取得表或者视图的元数据对象。
	 * 
	 * <pre>
	 * 	根据数据源，对象名称，是否视图获取表或者视图的元数据对象。
	 * </pre>
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public Map getObjectByDsObjectName(HttpServletRequest request, HttpServletResponse response) throws Exception {
		String dsName = RequestUtil.getString(request, "dsName");
		String objectName = RequestUtil.getString(request, "objectName");
		int istable = RequestUtil.getInt(request, "istable");
		Map map = new HashMap();
		TableModel tableModel;
		try {
			// 加载表
			if (istable == 1) {
				BaseTableMeta meta = TableMetaFactory.getMetaData(dsName);
				tableModel = meta.getTableByName(objectName);
			} else {
				IDbView dbView = TableMetaFactory.getDbView(dsName);
				tableModel = dbView.getModelByViewName(objectName);
			}
			map.put("tableModel", tableModel);
			map.put("success", "true");
		} catch (Exception ex) {
			map.put("success", "false");
		}
		return map;
	}

	/**
	 * 设置字段对话框。
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("setting")
	public ModelAndView setting(HttpServletRequest request, HttpServletResponse response) throws Exception {
		long id = RequestUtil.getLong(request, "id");
		String dsName = "";
		String objectName = "";
		int istable = 0;
		int style = 0;
		ModelAndView mv = this.getAutoView();
		if (id == 0) {
			dsName = RequestUtil.getString(request, "dsName");
			objectName = RequestUtil.getString(request, "objectName");
			istable = RequestUtil.getInt(request, "istable");
			style = RequestUtil.getInt(request, "style");
		} else {
			SysTableManage sysTableManage = sysTableManageService.getById(id);
			dsName = sysTableManage.getDsalias();
			objectName = sysTableManage.getObjname();
			istable = sysTableManage.getIstable();
			style = sysTableManage.getStyle();
			mv.addObject("sysTableManage", sysTableManage);
		}

		TableModel tableModel;
		// 表
		if (istable == 1) {
			BaseTableMeta meta = TableMetaFactory.getMetaData(dsName);
			tableModel = meta.getTableByName(objectName);
		}
		// 视图处理
		else {
			IDbView dbView = TableMetaFactory.getDbView(dsName);
			tableModel = dbView.getModelByViewName(objectName);
		}

		mv.addObject("tableModel", tableModel).addObject("style", style);

		return mv;
	}

	/**
	 * 取得树形数据。
	 * 
	 * @param request
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("getTreeData")
	@ResponseBody
	public List getTreeData(HttpServletRequest request) throws Exception {
		String alias = RequestUtil.getString(request, "alias");

		return sysTableManageService.getTreeData(alias);
	}

	/**
	 * 选择自定义对话框
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("getAllDialogs")
	@ResponseBody
	public List<SysTableManage> getAllDialogs(HttpServletRequest request, HttpServletResponse response) throws Exception {
		List<SysTableManage> list= sysTableManageService.getAll();		
		return list;
	}

	/**
	 * 显示对话框。
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("show")
	public ModelAndView show(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map<String,Object> paramsMap = RequestUtil.getQueryMap(request);
		String alias = RequestUtil.getString(request, "dialog_alias_");
		String nextUrl = RequestUtil.getUrl(request);
		
		SysTableManage sysTableManage = sysTableManageService.getData(alias, paramsMap);
		ModelAndView mv = this.getAutoView();
		mv.addObject("sysTableManage", sysTableManage);
		//需要排序
		if(sysTableManage.getStyle()==0){
			String sortField=RequestUtil.getString(request, "sortField");
			String orderSeq=RequestUtil.getString(request, "orderSeq", DEFAULT_ORDER_SEQ);
			String newSortField=RequestUtil.getString(request, "newSortField");
			if(StringUtil.isNotEmpty(sortField)){
				paramsMap.put("sortField", sortField);
				paramsMap.put("orderSeq", orderSeq);
			}
			if(StringUtil.isEmpty(sortField)){
				SysManageField sysManageField = sysTableManage.getDisplayList().get(0);
				sortField = sysManageField.getFieldName();
			}
			
			if(newSortField.equals(sortField)){
				if(orderSeq.equals("ASC")){
					orderSeq="DESC";
				}else{
					orderSeq="ASC";
				}
			}
			if(!StringUtil.isEmpty(newSortField)){
				sortField=newSortField;
			}
			
			Map<String,Object> parameters=new HashMap<String, Object>();
			parameters.put("sortField", StringUtil.isEmpty(newSortField)?sortField:newSortField);
			parameters.put("newSortField",null);
			parameters.put("orderSeq", orderSeq);
			nextUrl = addParametersToUrl(nextUrl, parameters);
			
			mv.addObject("sortField",sortField);
			mv.addObject("orderSeq",orderSeq);
			mv.addObject("baseHref", nextUrl);
		}
		// 需要分页
		if (sysTableManage.getNeedpage() == 1) {
			PageBean pageBean = sysTableManage.getPageBean();
			Map<String,Object> pageModel = new HashMap<String,Object>();
			pageModel.put("tableIdCode", "");
			pageModel.put("pageBean", pageBean);
			pageModel.put("showExplain", true);
			pageModel.put("showPageSize", true);
			pageModel.put("baseHref", nextUrl);
			String pageHtml = freemarkEngine.mergeTemplateIntoString("page.ftl", pageModel);
			mv.addObject("pageHtml", pageHtml);
		}
		return mv;
	}
	
	
	@SuppressWarnings("unchecked")
	@RequestMapping("preview")
	public ModelAndView preview(HttpServletRequest request, HttpServletResponse response) throws Exception {
		ModelAndView mv=getAutoView();
		//取得当前页URL,如有参数则带参数
		String baseURL = request.getRequestURI();
		Map<String,Object> paramsMap = RequestUtil.getQueryMap(request);
		//Table Id Code;
		String tableIdCode=getTableIdCode(paramsMap);
		paramsMap.put("tic",tableIdCode);
		//取得传入参数ID
		Long id = RequestUtil.getLong(request, tableIdCode+"__manageid__",-1);
		//如果Table ID Code 为空，生成一个新的Table ID Code
//		String sortField=RequestUtil.getString(request,tableIdCode+SysTableManage.SORTFIELD);
//		String orderSeq=RequestUtil.getString(request, tableIdCode+SysTableManage.ORDERSEQ, DEFAULT_ORDER_SEQ);
//		String newSortField=RequestUtil.getString(request, tableIdCode+"ns");
//		if(StringUtil.isNotEmpty(newSortField)){
//			if(newSortField.equals(sortField)){
//				if(orderSeq.equals("ASC")){
//					orderSeq="DESC";
//				}else{
//					orderSeq="ASC";
//				}
//			}
//			sortField=newSortField;
//			paramsMap.put(tableIdCode+SysTableManage.SORTFIELD, sortField);
//			paramsMap.put(tableIdCode+SysTableManage.ORDERSEQ, orderSeq);
//		}
		//从Map中删除新的排序参数值
		paramsMap.put("baseURL", baseURL);
		String html =sysTableManageService.getDisplay(id, paramsMap);
		mv.addObject("html", html);
		return mv;
	}
	
	
	private String getTableIdCode(Map<String,Object> params){
		for(String key:params.keySet()){
			if(key.endsWith("__manageid__"))
				return key.substring(0,key.lastIndexOf("__manageid__"));
		}
		return "";
	}
	
	/**
	 * 显示对话框。
	 * 
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@ResponseBody
	@RequestMapping("getDisplay")
	public Map<String,Object> getDisplay(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Map <String,Object> map=new HashMap<String, Object>();
		//取得所有的查询参数
		Map<String,Object> paramsMap = RequestUtil.getQueryMap(request);
		//取得传入参数ID
		Long id = RequestUtil.getLong(request, "id",-1);
		//取得当前页URL,如有参数则带参数
		String currentURL = RequestUtil.getUrl(request);
		SysTableManage sysTableManage = sysTableManageService.getData(id, paramsMap);
		ModelAndView mv = this.getAutoView();
		mv.addObject("sysTableManage", sysTableManage);
		//需要排序
		if(sysTableManage.getStyle()==0){
			String sortField=RequestUtil.getString(request, "sortField");
			String orderSeq=RequestUtil.getString(request, "orderSeq", DEFAULT_ORDER_SEQ);
			String newSortField=RequestUtil.getString(request, "newSortField");
			if(StringUtil.isNotEmpty(sortField)){
				paramsMap.put("sortField", sortField);
				paramsMap.put("orderSeq", orderSeq);
			}
			if(StringUtil.isEmpty(sortField)){
				SysManageField sysManageField = sysTableManage.getDisplayList().get(0);
				sortField = sysManageField.getFieldName();
			}
			
			if(newSortField.equals(sortField)){
				if(orderSeq.equals("ASC")){
					orderSeq="DESC";
				}else{
					orderSeq="ASC";
				}
			}
			if(!StringUtil.isEmpty(newSortField)){
				sortField=newSortField;
			}
			
			Map<String,Object> parameters=new HashMap<String, Object>();
			parameters.put("sortField", StringUtil.isEmpty(newSortField)?sortField:newSortField);
			parameters.put("newSortField",null);
			parameters.put("orderSeq", orderSeq);
			currentURL = addParametersToUrl(currentURL, parameters);
//			mv.addObject("sortField",sortField);
//			mv.addObject("orderSeq",orderSeq);
//			mv.addObject("pageURL", currentURL);
			
			//第一次解析模板
			Map<String,Object> freemarkerMap =new HashMap<String, Object>();
			freemarkerMap.put("conditionFields", sysTableManage.getConditionList());
			freemarkerMap.put("displayFields", sysTableManage.getDisplayList());
			freemarkerMap.put("tbarTitle",sysTableManage.getName());
			freemarkerMap.put("pageURL", currentURL);
			freemarkerMap.put("id", sysTableManage.getId());
			String dataTemplate = freemarkEngine.mergeTemplateIntoString("tableManage/list.ftl", freemarkerMap);
			
			String pageHtml="";
			//需要分页
			if (sysTableManage.getNeedpage() == 1) {
				PageBean pageBean = sysTableManage.getPageBean();
				Map<String,Object> pageModel = new HashMap<String,Object>();
				pageModel.put("tableIdCode", "");
				pageModel.put("pageBean", pageBean);
				pageModel.put("showExplain", true);
				pageModel.put("showPageSize", true);
				pageModel.put("baseHref", currentURL);
				pageHtml = freemarkEngine.mergeTemplateIntoString("page.ftl", pageModel);
			}
			//第二次解析模板
			Map<String,Object> freemarkerMap2 =new HashMap<String, Object>();
			freemarkerMap2.put("dataList", sysTableManage.getList());
			freemarkerMap2.put("pageHtml", pageHtml);
			freemarkerMap2.put("sortField",sortField);
			freemarkerMap2.put("orderSeq",orderSeq);
			String display = freemarkEngine.parseByStringTemplate(freemarkerMap2, dataTemplate);
			map.put("displayHtml", display);
		}
		return map;
	}
	
	
	
	
	private static Map<String,Object> getQueryStringMap(String url){
		Map<String,Object> map = new  HashMap<String, Object>();
		int idx1=url.indexOf("?");
		if(idx1>0){
			String queryStr=url.substring(idx1+1);
			String[] queryNodeAry = queryStr.split("&");
			for(String queryNode:queryNodeAry){
				String[] strAry = queryNode.split("=");
				map.put(strAry[0].trim(),strAry[1]);
			}
		}
		return map;
	}
	
	private static String addParametersToUrl(String url,Map<String, Object> params){
		StringBuffer sb=new StringBuffer();
		int idx1=url.indexOf("?");
		if(idx1>0){
			sb.append(url.substring(0, idx1));
		}
		sb.append("?");
		
		Map<String,Object> map=getQueryStringMap(url);
		map.putAll(params);
		
		for(Entry<String, Object> entry:map.entrySet()){
			if(BeanUtils.isEmpty(entry.getValue()))
				continue;
			sb.append(entry.getKey());
			sb.append("=");
			sb.append(entry.getValue());
			sb.append("&");
		}
		return sb.substring(0, sb.length()-1);
	}
	
	/**
	 * 取得 SysTableManage 实体
	 * 
	 * @param request
	 * @return
	 * @throws Exception
	 */
	protected SysTableManage getFormObject(HttpServletRequest request) throws Exception {
		JSONUtils.getMorpherRegistry().registerMorpher(new DateMorpher((new String[] { "yyyy-MM-dd" })));
		String json = RequestUtil.getString(request, "json");
		JSONObject obj = JSONObject.fromObject(json);
		SysTableManage sysTableManage = (SysTableManage) JSONObject.toBean(obj,SysTableManage.class);
		return sysTableManage;
	}
	
	@RequestMapping("dialog")
	public ModelAndView dialog(HttpServletRequest request, HttpServletResponse response) throws Exception{
		ModelAndView mv=getAutoView();
		return mv;
	}
	
	@RequestMapping("selector")
	public ModelAndView selector(HttpServletRequest request, HttpServletResponse response) throws Exception {
		List<SysTableManage> list = sysTableManageService.getAll(new QueryFilter(request, "sysTableManageItem"));
		ModelAndView mv = this.getAutoView().addObject("sysTableManageList", list);
		return mv;
	}
}
